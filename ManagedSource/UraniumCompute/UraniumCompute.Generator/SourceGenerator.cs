using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using System.Collections.Immutable;
using System.Text;

namespace UraniumCompute.Generator;

[Generator(LanguageNames.CSharp)]
public class SourceGenerator : IIncrementalGenerator
{
    static List<string> MethodNames = new();
    static int MethodCount = 0;

    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        IncrementalValuesProvider<MethodDeclarationSyntax> methodDeclarations =
            context.SyntaxProvider
                .CreateSyntaxProvider(
                    static (s, _) => IsMethodWithAttributes(s),
                    static (ctx, _) => GetMethodDeclaration(ctx))
                .Where(static m => m is not null)!;

        var compilationAndMethods = context.CompilationProvider.Combine(methodDeclarations.Collect());

        context.RegisterSourceOutput(compilationAndMethods,
            static (spc, source) => Execute(source.Item1, source.Item2, spc));

        var source = @"// <auto-generated/>
using System;
namespace TempGenerated
{
    public class TempClass
    {
        public static void Write() 
        {
            Console.WriteLine(""" + MethodCount + " " + string.Join(" ", MethodNames) + @""");
        }
    }
}";
        context.RegisterPostInitializationOutput(ctx => ctx.AddSource($"TempFile.g.cs", source));
    }

    static bool IsMethodWithAttributes(SyntaxNode node)
        => node is MethodDeclarationSyntax { AttributeLists.Count: > 0 };

    static MethodDeclarationSyntax? GetMethodDeclaration(GeneratorSyntaxContext context)
    {
        var methodDeclarationSyntax = (MethodDeclarationSyntax)context.Node;

        foreach (AttributeListSyntax attributeListSyntax in methodDeclarationSyntax.AttributeLists)
        {
            foreach (var attributeSyntax in attributeListSyntax.Attributes)
            {
                if (context.SemanticModel.GetSymbolInfo(attributeSyntax).Symbol is not IMethodSymbol attributeSymbol)
                {
                    continue;
                }

                INamedTypeSymbol attributeContainingTypeSymbol = attributeSymbol.ContainingType;
                string fullName = attributeContainingTypeSymbol.ToDisplayString();

                if (fullName == "UraniumCompute.Generator.CompileKernelAttribute")
                {
                    MethodCount++;
                    return methodDeclarationSyntax;
                }
            }
        }

        return null;
    }

    static void Execute(
        Compilation compilation,
        ImmutableArray<MethodDeclarationSyntax> methods,
        SourceProductionContext context)
    {
        if (methods.IsDefaultOrEmpty)
        {
            return;
        }

        var userMethods = GetUserMethods(compilation, methods, context.CancellationToken);

        if (userMethods.Count > 0)
        {
            string result = GenerateUserMethods(userMethods);
            context.AddSource("TargetMethods.g.cs", SourceText.From(result, Encoding.UTF8));
        }
    }

    static List<CompiledMethod> GetUserMethods(
        Compilation compilation,
        ImmutableArray<MethodDeclarationSyntax> methods,
        CancellationToken ct)
    {
        var userMethods = new List<CompiledMethod>();
        var methodAttribute = compilation.GetTypeByMetadataName("UraniumCompute.Generator.CompileKernelAttribute");

        if (methodAttribute == null)
        {
            return userMethods;
        }

        foreach (var method in methods)
        {
            ct.ThrowIfCancellationRequested();

            MethodNames.Add(method.Identifier.Text);
            userMethods.Add(new CompiledMethod(method));
        }

        return userMethods;
    }

    static string GenerateUserMethods(List<CompiledMethod> userMethods)
    {
        var sb = new StringBuilder();
        sb.Append(@"// <auto-generated/>
using System;
namespace TempGenerated2
{
    public class UserMethods
    {");
        foreach (var method in userMethods)
        {
            sb.Append(
                $"{string.Join(" ", method.Declaration.Modifiers)} {method.Declaration.ReturnType} {method.Name}{method.Declaration.ParameterList}");
            sb.Append($"{method.Body.GetText()}\n");
        }
        sb.Append(@"
    }
}");
        return sb.ToString();
    }
}
