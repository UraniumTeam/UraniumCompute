using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System.Collections.Immutable;
using UraniumCompute.Generator.Translator;

namespace UraniumCompute.Generator;

[Generator(LanguageNames.CSharp)]
public class SourceGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var methodDeclarations = context.SyntaxProvider.CreateSyntaxProvider(
            static (s, _) => IsMethodWithAttributes(s),
            static (ctx, _) => GetMethodDeclaration(ctx));

        context.RegisterSourceOutput(
            methodDeclarations.Collect(),
            static (spc, source) => Execute(spc, source));
    }

    static bool IsMethodWithAttributes(SyntaxNode node)
        => node is MethodDeclarationSyntax { AttributeLists.Count: > 0 } method
           && method.AttributeLists
               .SelectMany(als => als.Attributes)
               .Any(a => $"{a.Name}Attribute" == nameof(CompileKernelAttribute));

    static MethodDeclarationSyntax GetMethodDeclaration(GeneratorSyntaxContext context)
        => (MethodDeclarationSyntax)context.Node;

    static void Execute(
        SourceProductionContext context,
        ImmutableArray<MethodDeclarationSyntax> methods)
    {
        if (methods.IsDefaultOrEmpty)
        {
            throw new Exception("There are no methods marked with the CompileKernel attribute");
        }

        var compiledMethods = GetCompiledMethods(methods, context.CancellationToken);
        var translatedMethods = compiledMethods.Select(CSharpToHlslTranslator.Translate);
        AddTranslatedMethodsToContext(translatedMethods, context);
    }

    private static void AddTranslatedMethodsToContext(
        IEnumerable<TranslatedMethod> translatedMethods,
        SourceProductionContext context)
    {
        var result = new StringWriter();
        result.Write(@"// <auto-generated/>
namespace MethodsTranslatedToHlsl
{");
        foreach (var method in translatedMethods)
        {
            result.Write(@$"
    public static class {method.Name}
    {{");
            result.WriteLine(@"
        public static readonly string Code = """"""");
            result.Write(@$"{method.Code}");
            result.Write(@""""""";
    }
}");
        }

        context.AddSource("MethodsTranslatedToHlsl.g.cs", result.ToString());
    }

    static List<CompiledMethod> GetCompiledMethods(
        ImmutableArray<MethodDeclarationSyntax> methods,
        CancellationToken ct)
    {
        var userMethods = new List<CompiledMethod>();
        foreach (var method in methods)
        {
            ct.ThrowIfCancellationRequested();
            userMethods.Add(new CompiledMethod(method));
        }
        return userMethods;
    }
}
